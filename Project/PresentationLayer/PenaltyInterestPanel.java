package PresentationLayer;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * **************************************************************************
 *
 * Ryan Bridges CSE 110, Fall 2014 Last Updated: December 6, 2014
 *
 * Team 42
 *
 * File Name: PenaltyInterestPanel.java Description: This panel allows the
 * teller to adjust the interest rates and penalties that will be applied when
 * the press they "Apply Global Interest And Penalties" button
 * **************************************************************************
 */
public class PenaltyInterestPanel extends javax.swing.JPanel
{

    private GUI mainGUI;
    private JPanel MainPanel;

    public PenaltyInterestPanel()
    {
        initComponents();
    }

    /**
     * Constructor for this panel. Calls initComponents to initialize all of the
     * components on the panel. Also Underlines the appropriate JLabels
     *
     * @param MainPanel The main panel that all of our pages are stored on
     * @param mainGUI A reference to the GUI which will allow us to have access
     * to all of our other pages from right here
     */
    public PenaltyInterestPanel(JPanel MainPanel, GUI mainGUI)
    {
        this.mainGUI = mainGUI;
        this.MainPanel = MainPanel;
        initComponents();
    }

    // Checks if a string can be parsed into a double
    public static boolean isParsable(String input)
    {
        boolean parsable = true;
        try
        {
            Double.parseDouble(input);
        } catch (NumberFormatException e)
        {
            parsable = false;
        }
        return parsable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        PanelDescLabel = new javax.swing.JLabel();
        HolderPanel = new javax.swing.JPanel();
        CheckingAccountRatesPanel = new javax.swing.JPanel();
        BalanceLabelTop = new javax.swing.JLabel();
        BalanceLabelMid = new javax.swing.JLabel();
        BalanceLabelBot = new javax.swing.JLabel();
        BalanceLabel = new javax.swing.JLabel();
        Checking_1000_2000_Label = new javax.swing.JLabel();
        Checking_2000_3000_Label = new javax.swing.JLabel();
        Checking_More_Than_3000_Label = new javax.swing.JLabel();
        CurrentCheckingRateLabel = new javax.swing.JLabel();
        CheckingNewRateLabel = new javax.swing.JLabel();
        Checking_1000_2000_Field = new javax.swing.JTextField();
        Checking_2000_3000_Field = new javax.swing.JTextField();
        Checking_More_Than_3000_Field = new javax.swing.JTextField();
        SavingsAccountRatesPanel = new javax.swing.JPanel();
        Savings_1000_2000_Label = new javax.swing.JLabel();
        Savings_2000_3000_Label = new javax.swing.JLabel();
        Savings_More_Than_3000_Label = new javax.swing.JLabel();
        CurrentSavingsRateLabel = new javax.swing.JLabel();
        SavingsNewRateLabel = new javax.swing.JLabel();
        Savings_1000_2000_Field = new javax.swing.JTextField();
        Savings_2000_3000_Field = new javax.swing.JTextField();
        Savings_More_Than_3000_Field = new javax.swing.JTextField();
        ConfirmButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        PenaltyButton = new javax.swing.JButton();
        Background = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("BGPanel"); // NOI18N
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        PanelDescLabel.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 48)); // NOI18N
        PanelDescLabel.setForeground(new java.awt.Color(204, 255, 204));
        PanelDescLabel.setText("Adjust Penalties and Interest");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(PanelDescLabel, gridBagConstraints);

        HolderPanel.setMaximumSize(new java.awt.Dimension(800, 600));
        HolderPanel.setMinimumSize(new java.awt.Dimension(800, 600));
        HolderPanel.setName(""); // NOI18N
        HolderPanel.setOpaque(false);
        HolderPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        HolderPanel.setLayout(new java.awt.GridBagLayout());

        CheckingAccountRatesPanel.setBackground(new java.awt.Color(204, 255, 204));
        CheckingAccountRatesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Checking Account Rates", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        CheckingAccountRatesPanel.setForeground(new java.awt.Color(153, 204, 255));
        CheckingAccountRatesPanel.setOpaque(false);
        CheckingAccountRatesPanel.setLayout(new java.awt.GridBagLayout());

        BalanceLabelTop.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BalanceLabelTop.setForeground(new java.awt.Color(153, 255, 153));
        BalanceLabelTop.setText("$1000-$2000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(BalanceLabelTop, gridBagConstraints);

        BalanceLabelMid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BalanceLabelMid.setForeground(new java.awt.Color(153, 255, 153));
        BalanceLabelMid.setText("$2000-$3000");
        BalanceLabelMid.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(BalanceLabelMid, gridBagConstraints);
        BalanceLabelMid.getAccessibleContext().setAccessibleDescription("");

        BalanceLabelBot.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BalanceLabelBot.setForeground(new java.awt.Color(153, 255, 153));
        BalanceLabelBot.setText("More than $3000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(BalanceLabelBot, gridBagConstraints);

        BalanceLabel.setFont(new java.awt.Font("Britannic Bold", 0, 16)); // NOI18N
        BalanceLabel.setForeground(new java.awt.Color(187, 224, 240));
        BalanceLabel.setText("<HTML><U>Balance</U></HTML>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(BalanceLabel, gridBagConstraints);

        Checking_1000_2000_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Checking_1000_2000_Label.setForeground(new java.awt.Color(153, 255, 153));
        Checking_1000_2000_Label.setText((String.valueOf(GUI.MasterTable.getCHECKING_RATE_1000_TO_2000()*100)) + "%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(Checking_1000_2000_Label, gridBagConstraints);

        Checking_2000_3000_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Checking_2000_3000_Label.setForeground(new java.awt.Color(153, 255, 153));
        Checking_2000_3000_Label.setText((String.valueOf(GUI.MasterTable.getCHECKING_RATE_2000_TO_3000()*100)) + "%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(Checking_2000_3000_Label, gridBagConstraints);

        Checking_More_Than_3000_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Checking_More_Than_3000_Label.setForeground(new java.awt.Color(153, 255, 153));
        Checking_More_Than_3000_Label.setText((String.valueOf(GUI.MasterTable.getCHECKING_RATE_OVER_3000()*100)) + "%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(Checking_More_Than_3000_Label, gridBagConstraints);

        CurrentCheckingRateLabel.setFont(new java.awt.Font("Britannic Bold", 0, 16)); // NOI18N
        CurrentCheckingRateLabel.setForeground(new java.awt.Color(187, 224, 240));
        CurrentCheckingRateLabel.setText("<HTML><U>Current Rate</U></HTML>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(CurrentCheckingRateLabel, gridBagConstraints);

        CheckingNewRateLabel.setFont(new java.awt.Font("Britannic Bold", 0, 16)); // NOI18N
        CheckingNewRateLabel.setForeground(new java.awt.Color(187, 224, 240));
        CheckingNewRateLabel.setText("<HTML><U>New Rate</U></HTML>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(CheckingNewRateLabel, gridBagConstraints);

        Checking_1000_2000_Field.setMinimumSize(new java.awt.Dimension(59, 30));
        Checking_1000_2000_Field.setPreferredSize(new java.awt.Dimension(59, 30));
        Checking_1000_2000_Field.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Checking_1000_2000_FieldActionPerformed(evt);
            }
        });
        Checking_1000_2000_Field.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                Checking_1000_2000_FieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(Checking_1000_2000_Field, gridBagConstraints);

        Checking_2000_3000_Field.setMinimumSize(new java.awt.Dimension(59, 30));
        Checking_2000_3000_Field.setPreferredSize(new java.awt.Dimension(59, 30));
        Checking_2000_3000_Field.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Checking_2000_3000_FieldActionPerformed(evt);
            }
        });
        Checking_2000_3000_Field.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                Checking_2000_3000_FieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(Checking_2000_3000_Field, gridBagConstraints);

        Checking_More_Than_3000_Field.setMinimumSize(new java.awt.Dimension(59, 30));
        Checking_More_Than_3000_Field.setPreferredSize(new java.awt.Dimension(59, 30));
        Checking_More_Than_3000_Field.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Checking_More_Than_3000_FieldActionPerformed(evt);
            }
        });
        Checking_More_Than_3000_Field.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                Checking_More_Than_3000_FieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        CheckingAccountRatesPanel.add(Checking_More_Than_3000_Field, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        HolderPanel.add(CheckingAccountRatesPanel, gridBagConstraints);

        SavingsAccountRatesPanel.setBackground(new java.awt.Color(204, 255, 255));
        SavingsAccountRatesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Savings Account Rates", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        SavingsAccountRatesPanel.setToolTipText("");
        SavingsAccountRatesPanel.setName(""); // NOI18N
        SavingsAccountRatesPanel.setOpaque(false);
        SavingsAccountRatesPanel.setLayout(new java.awt.GridBagLayout());

        Savings_1000_2000_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Savings_1000_2000_Label.setForeground(new java.awt.Color(153, 255, 153));
        Savings_1000_2000_Label.setText((String.valueOf(GUI.MasterTable.getSAVINGS_RATE_1000_TO_2000()*100)) + "%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(Savings_1000_2000_Label, gridBagConstraints);

        Savings_2000_3000_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Savings_2000_3000_Label.setForeground(new java.awt.Color(153, 255, 153));
        Savings_2000_3000_Label.setText((String.valueOf(GUI.MasterTable.getSAVINGS_RATE_2000_TO_3000()*100)) + "%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(Savings_2000_3000_Label, gridBagConstraints);

        Savings_More_Than_3000_Label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Savings_More_Than_3000_Label.setForeground(new java.awt.Color(153, 255, 153));
        Savings_More_Than_3000_Label.setText((String.valueOf(GUI.MasterTable.getSAVINGS_RATE_OVER_3000()*100)) + "%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(Savings_More_Than_3000_Label, gridBagConstraints);

        CurrentSavingsRateLabel.setFont(new java.awt.Font("Britannic Bold", 0, 16)); // NOI18N
        CurrentSavingsRateLabel.setForeground(new java.awt.Color(187, 224, 240));
        CurrentSavingsRateLabel.setText("<HTML><U>Current Rate</U></HTML>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(CurrentSavingsRateLabel, gridBagConstraints);

        SavingsNewRateLabel.setFont(new java.awt.Font("Britannic Bold", 0, 16)); // NOI18N
        SavingsNewRateLabel.setForeground(new java.awt.Color(187, 224, 240));
        SavingsNewRateLabel.setText("<HTML><U>New Rate</U></HTML>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(SavingsNewRateLabel, gridBagConstraints);

        Savings_1000_2000_Field.setMinimumSize(new java.awt.Dimension(59, 30));
        Savings_1000_2000_Field.setPreferredSize(new java.awt.Dimension(59, 30));
        Savings_1000_2000_Field.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Savings_1000_2000_FieldActionPerformed(evt);
            }
        });
        Savings_1000_2000_Field.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                Savings_1000_2000_FieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(Savings_1000_2000_Field, gridBagConstraints);

        Savings_2000_3000_Field.setMinimumSize(new java.awt.Dimension(59, 30));
        Savings_2000_3000_Field.setPreferredSize(new java.awt.Dimension(59, 30));
        Savings_2000_3000_Field.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Savings_2000_3000_FieldActionPerformed(evt);
            }
        });
        Savings_2000_3000_Field.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                Savings_2000_3000_FieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(Savings_2000_3000_Field, gridBagConstraints);

        Savings_More_Than_3000_Field.setMinimumSize(new java.awt.Dimension(59, 30));
        Savings_More_Than_3000_Field.setPreferredSize(new java.awt.Dimension(59, 30));
        Savings_More_Than_3000_Field.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Savings_More_Than_3000_FieldActionPerformed(evt);
            }
        });
        Savings_More_Than_3000_Field.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                Savings_More_Than_3000_FieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 5);
        SavingsAccountRatesPanel.add(Savings_More_Than_3000_Field, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        HolderPanel.add(SavingsAccountRatesPanel, gridBagConstraints);

        ConfirmButton.setBackground(new java.awt.Color(255, 255, 255));
        ConfirmButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ConfirmButton.setForeground(new java.awt.Color(14, 118, 188));
        ConfirmButton.setText("Confirm");
        ConfirmButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ConfirmButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        HolderPanel.add(ConfirmButton, gridBagConstraints);

        BackButton.setBackground(new java.awt.Color(255, 255, 255));
        BackButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BackButton.setForeground(new java.awt.Color(14, 118, 188));
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BackButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        HolderPanel.add(BackButton, gridBagConstraints);

        PenaltyButton.setBackground(new java.awt.Color(255, 255, 255));
        PenaltyButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        PenaltyButton.setForeground(new java.awt.Color(14, 118, 188));
        PenaltyButton.setText("Change Penalty");
        PenaltyButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                PenaltyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        HolderPanel.add(PenaltyButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(HolderPanel, gridBagConstraints);

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/wallpaper_abstract_wallpapers_00250_wallpapersuggest_com-HD.jpg"))); // NOI18N
        Background.setMaximumSize(new java.awt.Dimension(800, 600));
        Background.setMinimumSize(new java.awt.Dimension(800, 600));
        Background.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(Background, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Updates the Current Rates when the user changes them via the textboxes
    // on the page
    private boolean changeRates()
    {
        boolean wasCorrect = true;
        /* THIS CHUNK OF CODE IS A TEMPLATE FOR ALL CHUNKS BELOW. THE ONLY THING
         THAT CHANGES IS THE LABEL/FIELD THAT WE ARE EXAMINING */
        String input = Checking_1000_2000_Field.getText();
        if (!input.equals("")) // Check if the user has entered anything in this textfield
        {
            if (isParsable(input)) // Make sure the user didnt enter invalid input
            {
                // Update the value in the backend that the user changed
                GUI.MasterTable.setCHECKING_RATE_1000_TO_2000((Double.parseDouble(input) / 100));
                // update the JLabel
                Checking_1000_2000_Label.setText(input + "%");
                Checking_1000_2000_Field.setText(null);
            }
            else
            {
                // Will print an error message
                wasCorrect = false;
            }
        }
        input = Checking_2000_3000_Field.getText();
        if (!input.equals(""))
        {
            if (isParsable(input))
            {
                GUI.MasterTable.setCHECKING_RATE_2000_TO_3000((Double.parseDouble(input) / 100));
                Checking_2000_3000_Label.setText(input + "%");
                Checking_2000_3000_Field.setText(null);
            }
            else
            {
                wasCorrect = false;
            }
        }
        input = Checking_More_Than_3000_Field.getText();
        if (!input.equals(""))
        {
            if (isParsable(input))
            {
                GUI.MasterTable.setCHECKING_RATE_OVER_3000((Double.parseDouble(input) / 100));
                Checking_More_Than_3000_Label.setText(input + "%");
                Checking_More_Than_3000_Field.setText(null);
            }
            else
            {
                wasCorrect = false;
            }
        }

        input = Savings_1000_2000_Field.getText();
        if (!input.equals(""))
        {
            if (isParsable(input))
            {
                GUI.MasterTable.setSAVINGS_RATE_1000_TO_2000((Double.parseDouble(input) / 100));
                Savings_1000_2000_Label.setText(input + "%");
                Savings_1000_2000_Field.setText(null);
            }
            else
            {
                wasCorrect = false;
            }
        }
        input = Savings_2000_3000_Field.getText();
        if (!input.equals(""))
        {
            if (isParsable(input))
            {
                GUI.MasterTable.setSAVINGS_RATE_2000_TO_3000((Double.parseDouble(input) / 100));
                Savings_2000_3000_Label.setText(input + "%");
                Savings_2000_3000_Field.setText(null);
            }
            else
            {
                wasCorrect = false;
            }
        }
        input = Savings_More_Than_3000_Field.getText();
        if (!input.equals(""))
        {
            if (isParsable(input))
            {
                GUI.MasterTable.setSAVINGS_RATE_OVER_3000((Double.parseDouble(input) / 100));
                Savings_More_Than_3000_Label.setText(input + "%");
                Savings_More_Than_3000_Field.setText(null);
            }
            else
            {
                wasCorrect = false;
            }
        }
        if (!wasCorrect)
        {
            JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", JOptionPane.ERROR_MESSAGE);
        }
        GUI.dataout.exportDB(GUI.MasterTable);
        return wasCorrect;
    }

    /* The below action listeners all delegate to the above function to update
     the JLabels and the backend */
    private void Checking_1000_2000_FieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Checking_1000_2000_FieldActionPerformed
    {//GEN-HEADEREND:event_Checking_1000_2000_FieldActionPerformed
        changeRates();
    }//GEN-LAST:event_Checking_1000_2000_FieldActionPerformed

    private void Checking_2000_3000_FieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Checking_2000_3000_FieldActionPerformed
    {//GEN-HEADEREND:event_Checking_2000_3000_FieldActionPerformed
        changeRates();
    }//GEN-LAST:event_Checking_2000_3000_FieldActionPerformed

    private void Savings_More_Than_3000_FieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Savings_More_Than_3000_FieldActionPerformed
    {//GEN-HEADEREND:event_Savings_More_Than_3000_FieldActionPerformed
        changeRates();
    }//GEN-LAST:event_Savings_More_Than_3000_FieldActionPerformed

    private void Savings_2000_3000_FieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Savings_2000_3000_FieldActionPerformed
    {//GEN-HEADEREND:event_Savings_2000_3000_FieldActionPerformed
        changeRates();
    }//GEN-LAST:event_Savings_2000_3000_FieldActionPerformed

    private void Savings_1000_2000_FieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Savings_1000_2000_FieldActionPerformed
    {//GEN-HEADEREND:event_Savings_1000_2000_FieldActionPerformed
        changeRates();
    }//GEN-LAST:event_Savings_1000_2000_FieldActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BackButtonActionPerformed
    {//GEN-HEADEREND:event_BackButtonActionPerformed
        // Go back to the teller home
        CardLayout layout = (CardLayout) (MainPanel.getLayout());
        layout.show(MainPanel, "TellerMainMenu");
    }//GEN-LAST:event_BackButtonActionPerformed

    private void ConfirmButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ConfirmButtonActionPerformed
    {//GEN-HEADEREND:event_ConfirmButtonActionPerformed
        changeRates();
    }//GEN-LAST:event_ConfirmButtonActionPerformed

    private void Checking_More_Than_3000_FieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Checking_More_Than_3000_FieldActionPerformed
    {//GEN-HEADEREND:event_Checking_More_Than_3000_FieldActionPerformed
        changeRates();
    }//GEN-LAST:event_Checking_More_Than_3000_FieldActionPerformed

    // Reset the text fields when focus is gained
    private void Checking_1000_2000_FieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Checking_1000_2000_FieldFocusGained
    {//GEN-HEADEREND:event_Checking_1000_2000_FieldFocusGained
        Checking_1000_2000_Field.setText(null);
    }//GEN-LAST:event_Checking_1000_2000_FieldFocusGained

    private void Checking_2000_3000_FieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Checking_2000_3000_FieldFocusGained
    {//GEN-HEADEREND:event_Checking_2000_3000_FieldFocusGained
        Checking_2000_3000_Field.setText(null);
    }//GEN-LAST:event_Checking_2000_3000_FieldFocusGained

    private void Checking_More_Than_3000_FieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Checking_More_Than_3000_FieldFocusGained
    {//GEN-HEADEREND:event_Checking_More_Than_3000_FieldFocusGained
        Checking_More_Than_3000_Field.setText(null);
    }//GEN-LAST:event_Checking_More_Than_3000_FieldFocusGained

    private void Savings_1000_2000_FieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Savings_1000_2000_FieldFocusGained
    {//GEN-HEADEREND:event_Savings_1000_2000_FieldFocusGained
        Savings_1000_2000_Field.setText(null);
    }//GEN-LAST:event_Savings_1000_2000_FieldFocusGained

    private void Savings_2000_3000_FieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Savings_2000_3000_FieldFocusGained
    {//GEN-HEADEREND:event_Savings_2000_3000_FieldFocusGained
        Savings_2000_3000_Field.setText(null);
    }//GEN-LAST:event_Savings_2000_3000_FieldFocusGained

    private void Savings_More_Than_3000_FieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_Savings_More_Than_3000_FieldFocusGained
    {//GEN-HEADEREND:event_Savings_More_Than_3000_FieldFocusGained
        Savings_More_Than_3000_Field.setText(null);
    }//GEN-LAST:event_Savings_More_Than_3000_FieldFocusGained

    // This function allows the user to update the current penalty through a
    // popup box
    private void PenaltyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PenaltyButtonActionPerformed
    {//GEN-HEADEREND:event_PenaltyButtonActionPerformed
        double amount;
        // Display initial popup box
        Object amountstring = JOptionPane.showInputDialog(
                null, "The current penalty is $" + GUI.MasterTable.PENALTY_AMOUNT
                + "\n" + "Please enter a new penalty amount", "Bank 42", 1, GUI.icon, null, null);
        // Return if the user left the input field blank
        if (amountstring == null)
            return;
        // Check fi the user entered valid input
        if (isParsable(amountstring.toString()))
            amount = Double.parseDouble(amountstring.toString());
        else
        {
            // Display an error message if they did not
            JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", 1, GUI.icon);
            return;
        }

        if (amount < 0)
        {
            // Display an error message if the user tries to enter a negative number
            JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", 1, GUI.icon);
            return;
        }
        // Update the new penalty and export it to the database
        GUI.MasterTable.PENALTY_AMOUNT = amount;
        GUI.dataout.exportDB(GUI.MasterTable);
        JOptionPane.showMessageDialog(null, "Success!\n $" + amount + " is the new penalty.", "Bank 42", 1, GUI.icon);
    }//GEN-LAST:event_PenaltyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel Background;
    private javax.swing.JLabel BalanceLabel;
    private javax.swing.JLabel BalanceLabelBot;
    private javax.swing.JLabel BalanceLabelMid;
    private javax.swing.JLabel BalanceLabelTop;
    private javax.swing.JPanel CheckingAccountRatesPanel;
    private javax.swing.JLabel CheckingNewRateLabel;
    private javax.swing.JTextField Checking_1000_2000_Field;
    private javax.swing.JLabel Checking_1000_2000_Label;
    private javax.swing.JTextField Checking_2000_3000_Field;
    private javax.swing.JLabel Checking_2000_3000_Label;
    private javax.swing.JTextField Checking_More_Than_3000_Field;
    private javax.swing.JLabel Checking_More_Than_3000_Label;
    private javax.swing.JButton ConfirmButton;
    private javax.swing.JLabel CurrentCheckingRateLabel;
    private javax.swing.JLabel CurrentSavingsRateLabel;
    private javax.swing.JPanel HolderPanel;
    private javax.swing.JLabel PanelDescLabel;
    private javax.swing.JButton PenaltyButton;
    private javax.swing.JPanel SavingsAccountRatesPanel;
    private javax.swing.JLabel SavingsNewRateLabel;
    private javax.swing.JTextField Savings_1000_2000_Field;
    private javax.swing.JLabel Savings_1000_2000_Label;
    private javax.swing.JTextField Savings_2000_3000_Field;
    private javax.swing.JLabel Savings_2000_3000_Label;
    private javax.swing.JTextField Savings_More_Than_3000_Field;
    private javax.swing.JLabel Savings_More_Than_3000_Label;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
