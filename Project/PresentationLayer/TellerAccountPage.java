/**
 * **************************************************************************
 *
 * Ryan Bridges CSE 110, Fall 2014 Last Updated: December 12, 2014
 *
 * Team 42
 *
 * File Name: TellerAccountPage.java Description: This class defines the page
 * that allows the Teller to view a user's BankAccounts, make deposits and
 * withdraws to a user's BankAccount, delete a user's BankAccount, and close an
 * entire UserAccount.
 * **************************************************************************
 */
package PresentationLayer;

import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import FacadeLayer.UserAccountWrapper;
import static PresentationLayer.AccountsListPanel.BALANCECOL;
import static PresentationLayer.AccountsListPanel.NAMECOL;

public class TellerAccountPage extends javax.swing.JPanel
{

    // References to the MainPanel and mainGUI which give us access to the
    // rest of the pages in the GUI
    private JPanel MainPanel;
    private GUI mainGUI;
    // Reference to the Facade so that we can have access to the data in the
    // backend in a format that is easy to use with JTable
    private UserAccountWrapper wrapper;
    private int total_accounts;
    private String[] accountlist;
    private DefaultListSelectionModel SelectionModel;

    /**
     * Creates new form TellerAccountPage
     */
    public TellerAccountPage()
    {
        initComponents();
    }

    public TellerAccountPage(JPanel MainPanel, GUI mainGUI)
    {
        this.MainPanel = MainPanel;
        this.mainGUI = mainGUI;
        initComponents();
    }

    // This function will return the row in the table that belongs to the passed
    // in accountName
    private int findRowPositionByName(String accountName)
    {
        int cRow = 0;
        int totalRows = AccountsTable.getRowCount();
        while (!accountName.equals(AccountsTable.getValueAt(cRow, NAMECOL))
                || cRow == totalRows)
        {
            cRow++;
        }
        return cRow;
    }

    // Allows us to update the table when a deposit/withdraw is made
    public void setNewCellValue(double NewBalance, String accountName)
    {
        AccountsTable.setValueAt((Object) NewBalance,
                findRowPositionByName(accountName), BALANCECOL);
    }

    // Will update this page when it is shown by redrawing the table for the
    // current user
    public void update()
    {
        AccountsTable.setModel(new AccountsTableModel(GUI.currentUserAccount));
        SelectionModel.clearSelection();
        // Updates all JLabels on all pages
        mainGUI.updateUserLabels();
    }

    // ZACK COMMENT HERE
    public void deletecomboboxes(String bankacc)
    {
        wrapper = new UserAccountWrapper(GUI.currentUserAccount);
        total_accounts = wrapper.getTotalAccounts();
        accountlist = new String[total_accounts - 1];
        boolean accountfound = false;
        for (int i = 0; i < total_accounts; i++)
        {
            if (accountfound == false)
            {
                if (wrapper.getAccountName(i).compareTo(bankacc) != 0)
                {
                    accountlist[i] = wrapper.getAccountName(i);
                }
                else
                    accountfound = true;
            }

            else
            {
                accountlist[i - 1] = wrapper.getAccountName(i);
            }
        }
    }

    // Update the JLabel to show the correct UserAccount name
    public void updateUserLabel()
    {
        CurrentUserAccountLabel.setText(GUI.currentUserAccount.getUserName() + "'s Bank Accounts");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        CurrentUserAccountLabel = new javax.swing.JLabel();
        Holder = new javax.swing.JPanel();
        MainComponentsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AccountsTable = new javax.swing.JTable();
        DepositButton = new javax.swing.JButton();
        WithdrawButton = new javax.swing.JButton();
        DeleteUserAccountButton = new javax.swing.JButton();
        DeleteAccountButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        Background = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.GridBagLayout());

        CurrentUserAccountLabel.setFont(new java.awt.Font("Franklin Gothic Medium Cond", 1, 48)); // NOI18N
        CurrentUserAccountLabel.setForeground(new java.awt.Color(204, 255, 255));
        CurrentUserAccountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CurrentUserAccountLabel.setText(GUI.currentUserAccount.getUserName() + "'s Bank Accounts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        add(CurrentUserAccountLabel, gridBagConstraints);

        Holder.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Holder.setMaximumSize(new java.awt.Dimension(600, 500));
        Holder.setMinimumSize(new java.awt.Dimension(600, 500));
        Holder.setOpaque(false);
        Holder.setPreferredSize(new java.awt.Dimension(600, 500));
        Holder.setLayout(new java.awt.GridBagLayout());

        MainComponentsPanel.setOpaque(false);
        MainComponentsPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(454, 300));

        AccountsTable.setAutoCreateRowSorter(true);
        AccountsTable.setSelectionModel(SelectionModel = new DefaultListSelectionModel());
        SelectionModel.setSelectionMode(0);
        AccountsTable.setBackground(new Color(255,255,255));
        AccountsTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        AccountsTable.setForeground(new java.awt.Color(14, 118, 188));
        AccountsTable.setModel(new PresentationLayer.AccountsTableModel(PresentationLayer.GUI.currentUserAccount));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        AccountsTable.setDefaultRenderer(String.class, centerRenderer);
        AccountsTable.setDefaultRenderer(Double.class, centerRenderer);
        AccountsTable.setColumnSelectionAllowed(false);
        AccountsTable.getTableHeader().setResizingAllowed(false);
        AccountsTable.getTableHeader().setFont(new Font("Tahoma", Font.BOLD, 12));
        AccountsTable.setGridColor(new java.awt.Color(255, 255, 255));
        AccountsTable.getTableHeader().setDefaultRenderer((new HeaderRenderer(AccountsTable)));
        AccountsTable.setMaximumSize(new java.awt.Dimension(440, 390));
        AccountsTable.getTableHeader().setForeground(new Color(0,0,204));
        AccountsTable.setMinimumSize(new java.awt.Dimension(440, 390));
        AccountsTable.getTableHeader().setReorderingAllowed(false);
        AccountsTable.setOpaque(false);
        AccountsTable.setPreferredSize(new java.awt.Dimension(440, 390));
        AccountsTable.setSelectionBackground(new java.awt.Color(14, 118, 188));
        AccountsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(AccountsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        MainComponentsPanel.add(jScrollPane1, gridBagConstraints);

        DepositButton.setBackground(new java.awt.Color(255, 255, 255));
        DepositButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DepositButton.setForeground(new java.awt.Color(14, 118, 188));
        DepositButton.setText("Deposit");
        DepositButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                DepositButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        MainComponentsPanel.add(DepositButton, gridBagConstraints);

        WithdrawButton.setBackground(new java.awt.Color(255, 255, 255));
        WithdrawButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        WithdrawButton.setForeground(new java.awt.Color(14, 118, 188));
        WithdrawButton.setText("Withdraw");
        WithdrawButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                WithdrawButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 180, 10, 0);
        MainComponentsPanel.add(WithdrawButton, gridBagConstraints);

        DeleteUserAccountButton.setBackground(new java.awt.Color(255, 255, 255));
        DeleteUserAccountButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DeleteUserAccountButton.setForeground(new java.awt.Color(14, 118, 188));
        DeleteUserAccountButton.setText("Delete This User Account");
        DeleteUserAccountButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                DeleteUserAccountButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        MainComponentsPanel.add(DeleteUserAccountButton, gridBagConstraints);

        DeleteAccountButton.setBackground(new java.awt.Color(255, 255, 255));
        DeleteAccountButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DeleteAccountButton.setForeground(new java.awt.Color(14, 118, 188));
        DeleteAccountButton.setText("Delete Highlighted Bank Account");
        DeleteAccountButton.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                DeleteAccountButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        MainComponentsPanel.add(DeleteAccountButton, gridBagConstraints);

        BackButton.setBackground(new java.awt.Color(255, 255, 255));
        BackButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BackButton.setForeground(new java.awt.Color(14, 118, 188));
        BackButton.setText("Back");
        BackButton.setMaximumSize(new java.awt.Dimension(80, 25));
        BackButton.setMinimumSize(new java.awt.Dimension(80, 25));
        BackButton.setPreferredSize(new java.awt.Dimension(80, 25));
        BackButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BackButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        MainComponentsPanel.add(BackButton, gridBagConstraints);

        Holder.add(MainComponentsPanel, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(Holder, gridBagConstraints);

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/wallpaper_abstract_wallpapers_00250_wallpapersuggest_com-HD.jpg"))); // NOI18N
        Background.setText("jLabel1");
        Background.setAlignmentY(0.0F);
        Background.setMaximumSize(new java.awt.Dimension(800, 600));
        Background.setMinimumSize(new java.awt.Dimension(800, 600));
        Background.setOpaque(true);
        Background.setPreferredSize(new java.awt.Dimension(800, 600));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(Background, gridBagConstraints);
        Background.getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    // Make sure that the user entered a valid double
    public static boolean isParsable(String input)
    {
        boolean parsable = true;
        try
        {
            Double.parseDouble(input);
        } catch (NumberFormatException e)
        {
            parsable = false;
        }
        return parsable;
    }

    // Allows the teller to deposit money into a BankAccount
    private void DepositButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DepositButtonMouseClicked
        if (AccountsTable.getSelectedRowCount() > 0) // Make sure the Teller has selected an account
        {
            double amount;
            // Display a dialog to get the amount to deposit
            Object amountstring = JOptionPane.showInputDialog(
                    null, "Amount to deposit: ", "Bank 42", 1, GUI.icon, null, null);
            if (amountstring == null)
                return;
            // Check valid input
            if (isParsable(amountstring.toString()))
            {
                amount = Double.parseDouble(amountstring.toString());
            }
            else // Error messages for invalid input
            {
                JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", 1, GUI.icon);
                return;
            }

            if (amount < 0)
            {
                JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", 1, GUI.icon);
                return;
            }

            //first, retrieve the row index of selection
            int row = AccountsTable.getSelectedRow();
            // Get the BankAccount at the selected row
            String user = (String) AccountsTable.getValueAt(row, 0);

            // setting the current bank account
            GUI.currentBankAccount = GUI.currentUserAccount.findBankAccount(user);

            // Error check to see if the bank account exists.
            if (GUI.currentBankAccount == null)
            {
                JOptionPane.showMessageDialog(null, "Error! Bank account does not match", "Bank 42", 0);
                return;
            }
            // Make sure that the deposit will not go over the limits
            if (GUI.currentBankAccount.addToBalance(amount))
            {
                // Update the cell with the new balance
                setNewCellValue(GUI.currentBankAccount.getBalance(), GUI.currentBankAccount.getAccountName());
                // show success message
                JOptionPane.showMessageDialog(null, "$" + amount + " was deposited into "
                        + GUI.currentBankAccount.getAccountName(), "Bank 42", 1, GUI.icon);
                // Update database
                GUI.dataout.exportDB(GUI.MasterTable);
            }
            else // Error message if deposit was invalid
            {
                JOptionPane.showMessageDialog(null, "Error! You have either reached your daily limit, \n"
                        + "or are attempting to deposit too much.", "Bank 42", 0);
            }
        }
        else // Error if the user didnt select an account
            JOptionPane.showMessageDialog(null, "Please select an account", "Bank 42", 1, GUI.icon);
    }//GEN-LAST:event_DepositButtonMouseClicked

    // Allows the teller to deposit money into a BankAccount
    private void WithdrawButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_WithdrawButtonMouseClicked
        if (AccountsTable.getSelectedRowCount() > 0) // Make sure that the Teller selected a row
        {
            double amount;
            // Display a prompt for withdraw amount
            Object amountstring = JOptionPane.showInputDialog(
                    null, "Amount to withdraw: ", "Bank 42", 1, GUI.icon, null, null);
            if (amountstring == null)
                return;
            if (isParsable(amountstring.toString())) // Check if amount entered was valid
            {
                amount = Double.parseDouble(amountstring.toString());
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", 1, GUI.icon);
                return;
            }

            if (amount < 0)
            {
                JOptionPane.showMessageDialog(null, "Please enter a valid number", "Bank 42", 1, GUI.icon);
                return;
            }

            //first, retrieve the row index of selection
            int row = AccountsTable.getSelectedRow();
            // Get the account at the selected row
            String user = (String) AccountsTable.getValueAt(row, 0);

            //setting the current bank account
            GUI.currentBankAccount = GUI.currentUserAccount.findBankAccount(user);

            if (GUI.currentBankAccount == null) // Sanity check. Make sure the account exists
            {
                JOptionPane.showMessageDialog(null, "Error bank account does not match", "Bank 42", 0);
                return;
            }

            // Don't allow the user to withdraw more than they have
            if (amount > GUI.currentBankAccount.getBalance())
            {

                JOptionPane.showMessageDialog(null, "Insufficient funds"
                        + "\nThere is $" + GUI.currentBankAccount.getBalance() + " available"
                        + " in selected bank account", "Bank 42", 0);
                return;
            }

            // Make sure that this withdraw will not put them over the limit
            if (GUI.currentBankAccount.subFromBalance(amount))
            {
                // Update the table and DB. show success message
                setNewCellValue(GUI.currentBankAccount.getBalance(), GUI.currentBankAccount.getAccountName());
                GUI.dataout.exportDB(GUI.MasterTable);
                JOptionPane.showMessageDialog(null, "$" + amount + " was withdrawn from "
                        + GUI.currentBankAccount.getAccountName(), "Bank 42", 1, GUI.icon);
            }

            else
            {
                JOptionPane.showMessageDialog(null, "Error! You have either reached your daily limit, \n"
                        + "or are attempting to withdraw too much.", "Bank 42", 0);
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Please select an account", "Bank 42", 1, GUI.icon);

    }//GEN-LAST:event_WithdrawButtonMouseClicked

    // Allows Teller to delete an entire UserAccount
    private void DeleteUserAccountButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_DeleteUserAccountButtonMouseClicked
    {//GEN-HEADEREND:event_DeleteUserAccountButtonMouseClicked
        // Display confirmation dialogue
        int n = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you would like to delete this user account?",
                "Bank 42",
                JOptionPane.YES_NO_OPTION, 1, GUI.icon);
        if (n == 0)
        {
            // Delete the UserAccount and update the DB
            GUI.MasterTable.deleteUserAccount(GUI.currentUserAccount.getUserName());
            GUI.currentBankAccount = null;
            GUI.currentUserAccount = null;
            GUI.dataout.exportDB(GUI.MasterTable);
            // Show success message and return to TellerMainMenue
            JOptionPane.showMessageDialog(null, "User account deleted", "Bank 42", 1, GUI.icon);
            CardLayout layout = (CardLayout) (MainPanel.getLayout());
            layout.show(MainPanel, "TellerMainMenu");
        }
    }//GEN-LAST:event_DeleteUserAccountButtonMouseClicked

    // Allows the teller to delete a BankAccount
    private void DeleteAccountButtonMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_DeleteAccountButtonMouseClicked
    {//GEN-HEADEREND:event_DeleteAccountButtonMouseClicked
        if (AccountsTable.getSelectedRowCount() > 0) // Make sure a row was selected
        {
            if (GUI.currentUserAccount.getNumOfBankAccounts() == 1) // Don't allow deletion of the last BankAccount
            {
                JOptionPane.showMessageDialog(null, "ERROR! You must have at least one bank account.\n"
                        + "You cannot delete this bank account without creating a new one first.", "Bank 42", 1, GUI.icon);
                return;
            }

            String account_type;
            double amount_in_deleted_acc;
            String account_name;
            // Get the name of the BankAccount in the selected row
            int row = AccountsTable.getSelectedRow();
            String bankacc = (String) AccountsTable.getValueAt(row, 0);
            // Store the balance of the account to be deleted so that we can send it somewhere
            GUI.currentBankAccount = GUI.currentUserAccount.findBankAccount(bankacc);
            amount_in_deleted_acc = GUI.currentBankAccount.getBalance();
            account_type = GUI.currentBankAccount.getAccountType();
            account_name = GUI.currentBankAccount.getAccountName();

            // Do nothing if balance was less than 0
            if (amount_in_deleted_acc == 0)
            {
                JOptionPane.showMessageDialog(null, bankacc + " has been deleted", "Bank 42", 1, GUI.icon);
                GUI.currentUserAccount.deleteBankAccount(bankacc);
                this.update();
                GUI.dataout.exportDB(GUI.MasterTable);
                return;
            }

            // Display options for what the user can do with the money in their deleted account
            Object[] options =
            {
                "To another bank account",
                "Email funds"
            };
            int n = JOptionPane.showOptionDialog(null,
                    "You have $" + amount_in_deleted_acc + " in account " + account_name
                    + "\nWhere would you like the funds to go?",
                    "Bank 42",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    GUI.icon,
                    options, //the titles of buttons
                    options[0]); //default button title

            // ZACK COMMENT HERE
            deletecomboboxes(bankacc);

            // Show a popup that allows the user to select an account to send money to
            // from the deleted account
            if (n == 0)
            {
                String choice = (String) JOptionPane.showInputDialog(
                        null,
                        "Choose a bank account",
                        "Bank 42",
                        JOptionPane.PLAIN_MESSAGE,
                        GUI.icon,
                        accountlist,
                        null);

                if (null == choice)
                {
                    return;
                }

                // Delete the BankAccount and update the Table and DB
                GUI.currentUserAccount.deleteBankAccount(bankacc);
                GUI.currentBankAccount = GUI.currentUserAccount.findBankAccount(choice);
                GUI.currentBankAccount.addToBalance(amount_in_deleted_acc);
                this.update();
                GUI.dataout.exportDB(GUI.MasterTable);
                // Show success messaage
                JOptionPane.showMessageDialog(null, "Bank account " + bankacc
                        + " has been deleted" + "\nFunds have been transfered to " + choice, "Bank 42", 1, GUI.icon);
            }

            else if (n == 1) // Send money to email address
            {
                // Delete the BankAccount and update the Table and the DB
                GUI.currentUserAccount.deleteBankAccount(bankacc);
                this.update();
                GUI.dataout.exportDB(GUI.MasterTable);
                // Success message
                JOptionPane.showMessageDialog(null, "Bank account " + bankacc
                        + " has been deleted" + "\nFunds have been emailed to " + GUI.currentUserAccount.getEmail(), "Bank 42", 1, GUI.icon);
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Please select an account", "Bank 42", 1, GUI.icon);
    }//GEN-LAST:event_DeleteAccountButtonMouseClicked

    // Take the Teller back to the MainMenue
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BackButtonActionPerformed
    {//GEN-HEADEREND:event_BackButtonActionPerformed
        CardLayout layout = (CardLayout) (MainPanel.getLayout());
        layout.show(MainPanel, "TellerMainMenu");
    }//GEN-LAST:event_BackButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AccountsTable;
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel Background;
    private javax.swing.JLabel CurrentUserAccountLabel;
    private javax.swing.JButton DeleteAccountButton;
    private javax.swing.JButton DeleteUserAccountButton;
    private javax.swing.JButton DepositButton;
    private javax.swing.JPanel Holder;
    private javax.swing.JPanel MainComponentsPanel;
    private javax.swing.JButton WithdrawButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
