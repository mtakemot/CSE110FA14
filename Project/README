/*
 * Filename: README
 * Author: Michio Takemoto
 * Date: 12/12/14
 * Group: TEAM 42
 */

Description
-----------
	This program incorporates design patters and development tools
taught throughout the course. Layering sourece files into different packages
creates more efficiency, and creates security. This implements the Facade design.
By grouping similar objects together, it helped us develop a clean, organized, 
productive design and allows for effecient changing of any of the underlying code. 
Other design patterns used:
	1): Factory Method for database imports/exports. All "saved" data after
	    runtime is delegated to the ImportExport.java class which instantiates
	    our database (MasterTable) object
	2): Decorator pattern to ensure that ALL bank accounts have specific interest
	    depending on what account type and balance it has. 
	3): By adding a Bankaccouunt member field in the User account class, we 
	    utilized the adaptor pattern to allow users to find related bank accounts
	    through user log in.
	4): Observer method was a key factor on the UI side. We had to ensure that 
	    all tables were updated with changes that may occur during runtime. To 
	    do this, we used ChangeListener on the GUI object holding the other 
	    GUI ages using the Decorator pattern, in a cardHolder layout. 
	5): Singleton method was incorporated with the ImportExport class, 
	    as an instance of this class only needs to be instantiated to perform
	    the import / export of the database. These calls occur and complete 
	    immediately and is no longer needed inbetween calls. To ensure that
	    we're not unnecessarily creating extra threads, and accessing database,
	    we have strategically created instances for this class and many others 
	    to prevent overusage of objects. Which may/may not run into time and cost
	    issues in he future.
	6) Most of our classes do have unique validity check methods (for example
	   almost all hte classes in Datalayer all use error checks unique to that
	   class).
The use of design patterns include but are not limited to what was described above. We
review customer requirements every iteration and implemented the best designs for each
requirement. The following below is the customer's requirement/description of the product:

https://sites.google.com/site/cse110fall2014/design-patterns


