/*
 * Filename: README
 * Author: Michio Takemoto
 * Date: 12/12/14
 * Group: TEAM 42
 */

*************************** NOTE TO USERS ***************************

Documentation can be found at various level of the code. This is the Project
README file. There is a README file that you should read for each layer, and even
a main README for developers in the main "/CSE110FA14/" directory which
has a few instructions on how to change parts of this application.
*********************************************************************

Description
-----------
	This program incorporates design patters and development tools
taught throughout the course. Layering source files into different packages
creates efficient, creates secure, organized, extensible, and loosely coupled solutions.

Design patterns used:
	1): Factory Method for database imports/exports. All "saved" data after
	    runtime is delegated to the ImportExport.java class which instantiates
	    our database (MasterTable) object
	2): Decorator pattern to ensure that ALL bank accounts have specific interest
	    depending on what account type and balance it has.
	3): Observer Pattern was a key factor on the UI side. We had to ensure that
	    all Tables/JLabels were updated with changes that may occur during runtime. To
	    do this, we used numerous different Listeners throughout the
            PresentationLayer. JLabels are updated through update() methods,
            and our JTable uses a variety of different listeners to update
            different fields when needed.
	4): Most of our classes do have unique validity check methods (for example
	    almost all the classes in Datalayer all use error checks unique to that
	    class). We also have lots of error checking throughout the GUI
            to ensure that the user is entering valid data
        5): For an expanation of how we use the Mediator Pattern, see PresentationLayer_README
The use of design patterns include but are not limited to what was described above. We
review customer requirements every iteration and implemented the best designs for each
requirement. The following below is the customer's requirement/description of the product:

https://sites.google.com/site/cse110fall2014/design-patterns

-----------------
Project contents:

1) Assets layer
2) DataLayer
3) FacadeLayer
4) LogicLayer
5) PresentationLayer

